/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.finaltermproject;

import com.formdev.flatlaf.extras.FlatSVGIcon;
import com.mycompany.createGUI.customerReturnInvoiceGUI.CreateReturnInvoice;

import com.mycompany.createGUI.salesInvoiceGUI.AddSalesInvoice;
import com.mycompany.createGUI.salesInvoiceGUI.SalesInvoiceDetail;
import com.sqlConnection.JDBCUtil;
import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JFrame;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author letri
 */
public class SalesInvoiceGUI extends javax.swing.JFrame {

    DefaultTableModel phieuBanTableModel;

    /**
     * Creates new form ImportUI
     */
    public SalesInvoiceGUI() {
        initComponents();
        phieuBanTableModel = (DefaultTableModel) phieuBanTable.getModel();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        confirmBtn = new javax.swing.JButton();
        returnBtn = new javax.swing.JButton();
        killNoteBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        backToMenuBtn = new javax.swing.JButton();
        addImportNoteBtn = new javax.swing.JButton();
        detailNoteBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        phieuBanTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));

        jPanel6.setBackground(new java.awt.Color(204, 255, 255));

        jLabel2.setIcon(new FlatSVGIcon("./icon/import.svg"));
        jLabel2.setPreferredSize(new java.awt.Dimension(72, 72));

        jLabel1.setFont(new java.awt.Font("Sitka Text", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Hóa đơn");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addContainerGap())
        );

        confirmBtn.setBackground(new java.awt.Color(102, 204, 0));
        confirmBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        confirmBtn.setForeground(new java.awt.Color(255, 255, 255));
        confirmBtn.setText("Xác nhận");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        returnBtn.setBackground(new java.awt.Color(255, 153, 0));
        returnBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        returnBtn.setForeground(new java.awt.Color(255, 255, 255));
        returnBtn.setText("Trả hàng");
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        killNoteBtn.setBackground(new java.awt.Color(255, 102, 102));
        killNoteBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        killNoteBtn.setForeground(new java.awt.Color(255, 255, 255));
        killNoteBtn.setText("Hủy phiếu");
        killNoteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killNoteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(returnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(killNoteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(killNoteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        getContentPane().add(jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        backToMenuBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backToMenuBtn.setText("Back");
        backToMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenuBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        jPanel3.add(backToMenuBtn, gridBagConstraints);

        addImportNoteBtn.setBackground(new java.awt.Color(102, 204, 255));
        addImportNoteBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addImportNoteBtn.setForeground(new java.awt.Color(255, 255, 255));
        addImportNoteBtn.setText("Tạo hóa đơn");
        addImportNoteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImportNoteBtn(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        jPanel3.add(addImportNoteBtn, gridBagConstraints);

        detailNoteBtn.setBackground(new java.awt.Color(153, 153, 255));
        detailNoteBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        detailNoteBtn.setForeground(new java.awt.Color(255, 255, 255));
        detailNoteBtn.setText("Chi tiết phiếu");
        detailNoteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailNoteBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        jPanel3.add(detailNoteBtn, gridBagConstraints);

        resetBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        resetBtn.setForeground(new java.awt.Color(153, 153, 153));
        resetBtn.setText("Làm mới");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        jPanel3.add(resetBtn, gridBagConstraints);

        getContentPane().add(jPanel3);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        phieuBanTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        phieuBanTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã hóa đơn", "Thời gian", "Trạng thái", "Mã khách hàng", "Accound ID", "Số lượng", "Tổng tiền"
            }
        ));
        phieuBanTable.setGridColor(new java.awt.Color(204, 204, 204));
        phieuBanTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                phieuBanTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(phieuBanTable);

        jScrollPane1.getViewport().setBackground(new Color(204,255,255));

        getContentPane().add(jScrollPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backToMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenuBtnActionPerformed
        mainUI mainUI = new mainUI();
        mainUI.setLocation(this.getX(), this.getY());
        mainUI.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backToMenuBtnActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        confirmBtn.setEnabled(false);
        returnBtn.setEnabled(false);
        killNoteBtn.setEnabled(false);
        try {
            Connection con = JDBCUtil.getConnection();
            String query = "SELECT "
                    + "pb.ma_phieu_ban  , "
                    + "pb.thoi_gian, "
                    + "pb.trang_thai, "
                    + "pb.khach_hang, "
                    + "pb.account_id, "
                    + "SUM(ct.quantity) AS tong_quantity, "
                    + "SUM(ct.quantity * CAST(ct.don_gia AS INT)) AS tong_tien "
                    + "FROM "
                    + "phieuban pb "
                    + "LEFT JOIN "
                    + "ctphieuban ct "
                    + "ON "
                    + "pb.ma_phieu_ban = ct.ma_phieu_ban "
                    + "GROUP BY "
                    + "pb.ma_phieu_ban, pb.thoi_gian, pb.trang_thai, pb.khach_hang, pb.account_id";

            ResultSet resultSet = JDBCUtil.getResultSet(con, query);
            ResultSetMetaData resultSetMetaData = JDBCUtil.getMetaData(resultSet);

            phieuBanTableModel.setRowCount(0);

            String id, thoiGian, trangThai, idKhachHang, accountId, tongQuantity, tongTien;
            while (resultSet.next()) {
                id = resultSet.getString(1);
                thoiGian = resultSet.getString(2);
                trangThai = resultSet.getString(3);
                idKhachHang = resultSet.getString(4);
                accountId = resultSet.getString(5);
                tongQuantity = resultSet.getString(6);
                tongTien = resultSet.getString(7);
                String[] row = {id, thoiGian, trangThai, idKhachHang, accountId, tongQuantity, tongTien};
                phieuBanTableModel.addRow(row);
            }
            JDBCUtil.closeConnection(con);

            // Tạo renderer tùy chỉnh cho cột Trạng thái
            phieuBanTable.getColumnModel().getColumn(2).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    // Gọi phương thức gốc
                    Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                    // Kiểm tra giá trị của cột và thay đổi hiển thị
                    if (value != null) {
                        // Chuyển giá trị từ String thành Integer
                        int status = Integer.parseInt((String) value); // Lấy giá trị String và chuyển thành Integer
                        switch (status) {
                            case 0 -> {
                                setText("Chưa giao");
                                setForeground(Color.DARK_GRAY);  // Màu chữ tối cho "Chưa giao"
                            }
                            case 1 -> {
                                setText("Đã thanh toán");
                                setForeground(Color.BLUE);  // Màu chữ xanh cho "Đã giao"
                            }
                            case 2 -> {
                                setText("Đã Hủy");
                                setForeground(Color.RED);  // Màu chữ đỏ cho "Đã hủy"
                            }
                            case 3 -> {
                                setText("Đã Trả hàng");
                                setForeground(Color.ORANGE);  // Màu chữ đỏ cho "Đã hủy"
                            }
                            default -> {
                                setText("Không xác định");
                                comp.setBackground(Color.WHITE); // Màu nền trắng cho giá trị không xác định
                                setForeground(Color.BLACK);  // Màu chữ đen cho giá trị không xác định
                            }
                        }
                    }
                    return comp;
                }
            });

            //jButton1.setEnabled(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + ex.getMessage());
        }
    }//GEN-LAST:event_formWindowActivated

    private void addImportNoteBtn(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImportNoteBtn
        AddSalesInvoice addSalesInvoice = new AddSalesInvoice();
        addSalesInvoice.setLocation(this.getX() + 20, this.getY() + 20);
        addSalesInvoice.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_addImportNoteBtn

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
// Kiểm tra dòng được chọn
        int selectedRow = phieuBanTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng trong bảng phiếu bán!");
            return;
        }

// Lấy giá trị ID từ dòng được chọn
        String id = phieuBanTable.getValueAt(selectedRow, 0).toString();

// Câu lệnh SQL với tham số `?`
        String updateProductQuantityQuery = "UPDATE products p "
                + "SET p.quantity = p.quantity - ("
                + "    SELECT SUM(ct.quantity) "
                + "    FROM ctphieuban ct "
                + "    WHERE ct.ma_phieu_ban = ? "
                + "    AND ct.ma_san_pham = p.id"
                + ") "
                + "WHERE EXISTS ("
                + "    SELECT 1 "
                + "    FROM ctphieuban ct "
                + "    WHERE ct.ma_phieu_ban = ? "
                + "    AND ct.ma_san_pham = p.id"
                + ")";

        try (Connection con = JDBCUtil.getConnection(); PreparedStatement confirmNote = con.prepareStatement("UPDATE phieuban SET trang_thai = 1 WHERE ma_phieu_ban = ?"); PreparedStatement updateProductQuantity = con.prepareStatement(updateProductQuantityQuery)) {

            // Xác nhận phiếu bán
            confirmNote.setString(1, id);
            int rowsUpdated = confirmNote.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Xác nhận phiếu bán thành công!");
                // Cập nhật trạng thái trên JTable
                phieuBanTableModel.setValueAt(1, selectedRow, 2);
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy dòng cần cập nhật trong cơ sở dữ liệu.");
            }

            // Cập nhật số lượng trong bảng products
            updateProductQuantity.setString(1, id); // Tham số đầu tiên cho `ma_phieu_ban`
            updateProductQuantity.setString(2, id); // Tham số thứ hai cho `ma_phieu_ban`
            int rowsAffected = updateProductQuantity.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Cập nhật thành công! Số dòng bị ảnh hưởng: " + rowsAffected);
            } else {
                System.out.println("Không có dữ liệu để cập nhật.");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + ex.getMessage());
        }

    }//GEN-LAST:event_confirmBtnActionPerformed

    private void phieuBanTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phieuBanTableMouseClicked
        int selectedRow = phieuBanTable.getSelectedRow();
        boolean isRowSelected = selectedRow >= 0;
        String trangThai = null;
        if (selectedRow != -1) {
            // Get values from the selected row
            trangThai = phieuBanTable.getValueAt(selectedRow, 2).toString();
        }

        switch (trangThai) {
            case "0" -> {
                confirmBtn.setEnabled(true);
                returnBtn.setEnabled(false);
                killNoteBtn.setEnabled(true);
            }
            case "1" -> {
                confirmBtn.setEnabled(false);
                returnBtn.setEnabled(true);
                killNoteBtn.setEnabled(false);
            }
            case "2" -> {
                confirmBtn.setEnabled(false);
                returnBtn.setEnabled(false);
                killNoteBtn.setEnabled(false);
            }
            default -> {
                confirmBtn.setEnabled(false);
                returnBtn.setEnabled(false);
                killNoteBtn.setEnabled(false);
            }
        }
    }//GEN-LAST:event_phieuBanTableMouseClicked

    private void detailNoteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailNoteBtnActionPerformed
        // Kiểm tra dòng được chọn
        int selectedRow = phieuBanTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng trong bảng!");
            return;
        }

        // Lấy giá trị ID từ dòng được chọn
        String id = phieuBanTable.getValueAt(selectedRow, 0).toString();
        String trangThai = phieuBanTable.getValueAt(selectedRow, 2).toString();
        SalesInvoiceDetail salesInvoiceDetail = new SalesInvoiceDetail(id, trangThai);
        salesInvoiceDetail.setLocation(this.getX() + 20, this.getY() + 20);
        salesInvoiceDetail.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_detailNoteBtnActionPerformed

    private void killNoteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killNoteBtnActionPerformed
// Kiểm tra dòng được chọn
        int selectedRow = phieuBanTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng trong bảng!");
            return;
        }

// Lấy giá trị ID từ dòng được chọn
        String id = phieuBanTable.getValueAt(selectedRow, 0).toString();

        try (Connection con = JDBCUtil.getConnection(); PreparedStatement comfirmNote = con.prepareStatement("UPDATE phieuban SET trang_thai = 2 WHERE ma_phieu_ban = ?")) {
            comfirmNote.setString(1, id);
            // Thực thi câu lệnh
            int rowsUpdated = comfirmNote.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Hủy phiếu thành công!");
                // Cập nhật giá trị trong JTable
                phieuBanTableModel.setValueAt(2, selectedRow, 2); // Giả sử cột trạng thái là cột thứ 2
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy phiếu bán cần cập nhật trong cơ sở dữ liệu.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + ex.getMessage());
        }
    }//GEN-LAST:event_killNoteBtnActionPerformed

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        int selectedRow = phieuBanTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng trong bảng!");
            return;
        }

// Lấy giá trị ID từ dòng được chọn
        String id = phieuBanTable.getValueAt(selectedRow, 0).toString();
        CreateReturnInvoice createReturnInvoice = new CreateReturnInvoice(id);
        createReturnInvoice.setLocation(this.getX() + 20, this.getY() + 20);
        createReturnInvoice.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        createReturnInvoice.setVisible(true);
    }//GEN-LAST:event_returnBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        confirmBtn.setEnabled(false);
        returnBtn.setEnabled(false);
        killNoteBtn.setEnabled(false);
        try {
            Connection con = JDBCUtil.getConnection();
            String query = "SELECT "
                    + "pb.ma_phieu_ban  , "
                    + "pb.thoi_gian, "
                    + "pb.trang_thai, "
                    + "pb.khach_hang, "
                    + "pb.account_id, "
                    + "SUM(ct.quantity) AS tong_quantity, "
                    + "SUM(ct.quantity * CAST(ct.don_gia AS INT)) AS tong_tien "
                    + "FROM "
                    + "phieuban pb "
                    + "LEFT JOIN "
                    + "ctphieuban ct "
                    + "ON "
                    + "pb.ma_phieu_ban = ct.ma_phieu_ban "
                    + "GROUP BY "
                    + "pb.ma_phieu_ban, pb.thoi_gian, pb.trang_thai, pb.khach_hang, pb.account_id";

            ResultSet resultSet = JDBCUtil.getResultSet(con, query);
            ResultSetMetaData resultSetMetaData = JDBCUtil.getMetaData(resultSet);

            phieuBanTableModel.setRowCount(0);

            String id, thoiGian, trangThai, idKhachHang, accountId, tongQuantity, tongTien;
            while (resultSet.next()) {
                id = resultSet.getString(1);
                thoiGian = resultSet.getString(2);
                trangThai = resultSet.getString(3);
                idKhachHang = resultSet.getString(4);
                accountId = resultSet.getString(5);
                tongQuantity = resultSet.getString(6);
                tongTien = resultSet.getString(7);
                String[] row = {id, thoiGian, trangThai, idKhachHang, accountId, tongQuantity, tongTien};
                phieuBanTableModel.addRow(row);
            }
            JDBCUtil.closeConnection(con);

            // Tạo renderer tùy chỉnh cho cột Trạng thái
            phieuBanTable.getColumnModel().getColumn(2).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    // Gọi phương thức gốc
                    Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                    // Kiểm tra giá trị của cột và thay đổi hiển thị
                    if (value != null) {
                        // Chuyển giá trị từ String thành Integer
                        int status = Integer.parseInt((String) value); // Lấy giá trị String và chuyển thành Integer
                        switch (status) {
                            case 0 -> {
                                setText("Chưa giao");
                                setForeground(Color.DARK_GRAY);  // Màu chữ tối cho "Chưa giao"
                            }
                            case 1 -> {
                                setText("Đã thanh toán");
                                setForeground(Color.BLUE);  // Màu chữ xanh cho "Đã giao"
                            }
                            case 2 -> {
                                setText("Đã Hủy");
                                setForeground(Color.RED);  // Màu chữ đỏ cho "Đã hủy"
                            }
                            case 3 -> {
                                setText("Đã Trả hàng");
                                setForeground(Color.ORANGE);  // Màu chữ đỏ cho "Đã hủy"
                            }
                            default -> {
                                setText("Không xác định");
                                comp.setBackground(Color.WHITE); // Màu nền trắng cho giá trị không xác định
                                setForeground(Color.BLACK);  // Màu chữ đen cho giá trị không xác định
                            }
                        }
                    }
                    return comp;
                }
            });

            //jButton1.setEnabled(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + ex.getMessage());
        }
    }//GEN-LAST:event_resetBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesInvoiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesInvoiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesInvoiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesInvoiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesInvoiceGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addImportNoteBtn;
    private javax.swing.JButton backToMenuBtn;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JButton detailNoteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton killNoteBtn;
    private javax.swing.JTable phieuBanTable;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton returnBtn;
    // End of variables declaration//GEN-END:variables
}
